"""
report_visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_NPL5w4azY70wI1ushhHUBbQvvKxv-LF
"""

import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
import json
from tabulate import tabulate
import pandas as pd
import numpy as np
from jinja2 import Template
import os
import shutil


def formulateToTableContents(template):
    tableContents = {'method': [], 'uri': [], 'description': []}
    for item in data['quickscan']:
        tableContents['method'].append(item['method'])
        tableContents['uri'].append(item['uri'])
        tableContents['description'].append(item['description'])
    print("\n\n")

    tabulate(tableContents, headers='keys', tablefmt='fancy_grid')
    df = pd.DataFrame.from_dict(tableContents)
    html = template.render(my_table=df.style.render())
    return html


def plotPortCounts():
    labels = []
    sizes = []

    labels.append('open ports')
    labels.append('closed ports')

    sizes.append(data['ports']['open_ports_count'])
    sizes.append(data['ports']['closed_ports_count'])
    colors = ['#FF0000', '#7CFC00']
    fig = plt.figure()
    myexplode = [0, 0.1]
    plt.pie(sizes, labels=labels, colors=colors, explode=myexplode, autopct='%.1f%%')
    plt.title('Ports', loc='center', fontsize=18)
    fig.savefig(os.path.join('report/', 'portCounts.svg'))
    plt.axis('equal')
    # plt.show()

def plotRisk():
    labels = []
    sizes = []

    labels.append('High')
    labels.append('Medium')
    labels.append('Low')

    sizes.append(len([i for i in range(len(data['detailed_scan'])) if data['detailed_scan'][i]['risk_level'].split(' ')[0] == 'High']))
    sizes.append(len([i for i in range(len(data['detailed_scan'])) if
                      data['detailed_scan'][i]['risk_level'].split(' ')[0] == 'Medium']))
    sizes.append(len([i for i in range(len(data['detailed_scan'])) if
                      data['detailed_scan'][i]['risk_level'].split(' ')[0] == 'Low']))
    colors = ['#7CFC00', '#FFAE42']

    fig = plt.figure()
    plt.title('Severity Level', loc='center', fontsize=18)
    myexplode1 = [0, 0.1, 0]
    plt.pie(sizes, labels=labels, colors=colors, explode=myexplode1, autopct='%.1f%%')
    fig.savefig(os.path.join('report/', 'Risk.svg'))
    plt.axis('equal')
    # plt.show()


def plotAlertNameInstances():
    xAxis = [item['alert_name'] for item in data['detailed_scan']]
    yAxis = [int(item['instances_count']) for item in data['detailed_scan']]
    plt.grid(True)
    fig = plt.figure()
    plt.barh(xAxis, yAxis, color='red')
    plt.title('Risk Instance Count', loc='center', fontsize=18)
    plt.xlabel('instances_count')
    plt.ylabel('alert_name')
    plt.tight_layout()
    fig.savefig(os.path.join('report/', 'alertNameInstancesPlot.svg'))
    # plt.show()


def color_negative_red(val):
    color = 'red' if val < 0 else 'black'
    return f'color: {color}'


if __name__ == '__main__':
    data = json.load(open('standard_report.json'))
    print('in main')
    if os.path.exists('report/'):
        shutil.rmtree('report/')
    os.makedirs('report/')
    print('report dir made')
    with open('dashboard.html') as f:
        template = Template(f.read())

    plotPortCounts()
    plotAlertNameInstances()
    html = formulateToTableContents(template)
    plotRisk()

    with open(os.path.join('report/', 'report.html'), 'w') as f:
        f.write(html)

